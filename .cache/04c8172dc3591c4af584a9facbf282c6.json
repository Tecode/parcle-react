{"dependencies":[{"name":"../operators/count","loc":{"line":2,"column":22}}],"generated":{"js":"\"use strict\";\nvar count_1 = require('../operators/count');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return count_1.count(predicate)(this);\n}\nexports.count = count;\n//# sourceMappingURL=count.js.map","map":{"mappings":[{"source":"node_modules/rxjs/operator/count.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/rxjs/operator/count.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}}],"sources":{"node_modules/rxjs/operator/count.js":"\"use strict\";\nvar count_1 = require('../operators/count');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return count_1.count(predicate)(this);\n}\nexports.count = count;\n//# sourceMappingURL=count.js.map"},"lineCount":55}},"hash":"027eff860fae5caf1e6dd26933979a10","cacheData":{"env":{}}}