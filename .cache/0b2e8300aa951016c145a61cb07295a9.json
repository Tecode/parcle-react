{"dependencies":[{"name":"../operators/observeOn","loc":{"line":2,"column":26}}],"generated":{"js":"\"use strict\";\nvar observeOn_1 = require('../operators/observeOn');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return observeOn_1.observeOn(scheduler, delay)(this);\n}\nexports.observeOn = observeOn;\n//# sourceMappingURL=observeOn.js.map","map":{"mappings":[{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/rxjs/operator/observeOn.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}}],"sources":{"node_modules/rxjs/operator/observeOn.js":"\"use strict\";\nvar observeOn_1 = require('../operators/observeOn');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return observeOn_1.observeOn(scheduler, delay)(this);\n}\nexports.observeOn = observeOn;\n//# sourceMappingURL=observeOn.js.map"},"lineCount":54}},"hash":"82cf034a8470c60d8df2a1099699d735","cacheData":{"env":{}}}