{"dependencies":[{"name":"../Observable","loc":{"line":7,"column":27}},{"name":"../util/tryCatch","loc":{"line":8,"column":25}},{"name":"../util/errorObject","loc":{"line":9,"column":28}},{"name":"../AsyncSubject","loc":{"line":10,"column":29}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundCallbackObservable = (function (_super) {\n    __extends(BoundCallbackObservable, _super);\n    function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a callback API to a function that returns an Observable.\n     *\n     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n     * it will return a function `g` that when called as `g(x)` will output an\n     * Observable.</span>\n     *\n     * `bindCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, the\n     * last parameter must be a callback function that `func` calls when it is\n     * done.\n     *\n     * The output of `bindCallback` is a function that takes the same parameters\n     * as `func`, except the last one (the callback). When the output function\n     * is called with arguments it will return an Observable. If function `func`\n     * calls its callback with one argument the Observable will emit that value.\n     * If on the other hand the callback is called with multiple values the resulting\n     * Observable will emit an array with said values as arguments.\n     *\n     * It is very important to remember that input function `func` is not called\n     * when the output function is, but rather when the Observable returned by the output\n     * function is subscribed. This means if `func` makes an AJAX request, that request\n     * will be made every time someone subscribes to the resulting Observable, but not before.\n     *\n     * Optionally, a selector function can be passed to `bindObservable`. The selector function\n     * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n     * Even though by default multiple arguments passed to callback appear in the stream as an array\n     * the selector function will be called with arguments directly, just as the callback would.\n     * This means you can imagine the default selector (when one is not provided explicitly)\n     * as a function that aggregates all its arguments into an array, or simply returns first argument\n     * if there is only one.\n     *\n     * The last optional parameter - {@link Scheduler} - can be used to control when the call\n     * to `func` happens after someone subscribes to Observable, as well as when results\n     * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n     * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n     * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n     * and call `subscribe` on the output Observable all function calls that are currently executing\n     * will end before `func` is invoked.\n     *\n     * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n     * In particular, if the callback is called synchronously the subscription of the resulting Observable\n     * will call the `next` function synchronously as well.  If you want to defer that call,\n     * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n     * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n     *\n     * Note that the Observable created by the output function will always emit a single value\n     * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n     * calls will not appear in the stream. If you need to listen for multiple calls,\n     *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n     *\n     * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n     * will be the context that the output function has at call time. In particular, if `func`\n     * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n     * it is recommended that the context of the output function is set to that object as well.\n     *\n     * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n     * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n     * provides convenient error handling and probably is a better choice.\n     * `bindCallback` will treat such functions the same as any other and error parameters\n     * (whether passed or not) will always be interpreted as regular callback argument.\n     *\n     *\n     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n     * // Suppose we have jQuery.getJSON('/my/url', callback)\n     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n     * var result = getJSONAsObservable('/my/url');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Receive an array of arguments passed to a callback</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 5\n     *   console.log(b); // 'some string'\n     *   console.log(c); // {someProperty: 'someValue'}\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n     * boundSomeFunction().subscribe(values => {\n     *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n     * });\n     *\n     *\n     * @example <caption>Use bindCallback with a selector function</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 'a'\n     *   console.log(b); // 'b'\n     *   console.log(c); // 'c'\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n     * boundSomeFunction().subscribe(value => {\n     *   console.log(value) // 'abc'\n     * });\n     *\n     *\n     * @example <caption>Compare behaviour with and without async Scheduler</caption>\n     * function iCallMyCallbackSynchronously(cb) {\n     *   cb();\n     * }\n     *\n     * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n     * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n     *\n     * boundSyncFn().subscribe(() => console.log('I was sync!'));\n     * boundAsyncFn().subscribe(() => console.log('I was async!'));\n     * console.log('This happened...');\n     *\n     * // Logs:\n     * // I was sync!\n     * // This happened...\n     * // I was async!\n     *\n     *\n     * @example <caption>Use bindCallback on an object method</caption>\n     * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n     * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n     * .subscribe(subscriber);\n     *\n     *\n     * @see {@link bindNodeCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func A function with a callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps them to a value that is emitted on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the callback would deliver.\n     * @static true\n     * @name bindCallback\n     * @owner Observable\n     */\n    BoundCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    BoundCallbackObservable.dispatch = function (state) {\n        var self = this;\n        var source = state.source, subscriber = state.subscriber, context = state.context;\n        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n        var subject = source.subject;\n        if (!subject) {\n            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n            var handler = function handlerFn() {\n                var innerArgs = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    innerArgs[_i - 0] = arguments[_i];\n                }\n                var source = handlerFn.source;\n                var selector = source.selector, subject = source.subject;\n                if (selector) {\n                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                    if (result_2 === errorObject_1.errorObject) {\n                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                    }\n                    else {\n                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                    }\n                }\n                else {\n                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n                }\n            };\n            // use named function to pass values in without closure\n            handler.source = source;\n            var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n            if (result === errorObject_1.errorObject) {\n                subject.error(errorObject_1.errorObject.e);\n            }\n        }\n        self.add(subject.subscribe(subscriber));\n    };\n    return BoundCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundCallbackObservable = BoundCallbackObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundCallbackObservable.js.map","map":{"mappings":[{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/rxjs/observable/BoundCallbackObservable.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}}],"sources":{"node_modules/rxjs/observable/BoundCallbackObservable.js":"\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundCallbackObservable = (function (_super) {\n    __extends(BoundCallbackObservable, _super);\n    function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a callback API to a function that returns an Observable.\n     *\n     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n     * it will return a function `g` that when called as `g(x)` will output an\n     * Observable.</span>\n     *\n     * `bindCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, the\n     * last parameter must be a callback function that `func` calls when it is\n     * done.\n     *\n     * The output of `bindCallback` is a function that takes the same parameters\n     * as `func`, except the last one (the callback). When the output function\n     * is called with arguments it will return an Observable. If function `func`\n     * calls its callback with one argument the Observable will emit that value.\n     * If on the other hand the callback is called with multiple values the resulting\n     * Observable will emit an array with said values as arguments.\n     *\n     * It is very important to remember that input function `func` is not called\n     * when the output function is, but rather when the Observable returned by the output\n     * function is subscribed. This means if `func` makes an AJAX request, that request\n     * will be made every time someone subscribes to the resulting Observable, but not before.\n     *\n     * Optionally, a selector function can be passed to `bindObservable`. The selector function\n     * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n     * Even though by default multiple arguments passed to callback appear in the stream as an array\n     * the selector function will be called with arguments directly, just as the callback would.\n     * This means you can imagine the default selector (when one is not provided explicitly)\n     * as a function that aggregates all its arguments into an array, or simply returns first argument\n     * if there is only one.\n     *\n     * The last optional parameter - {@link Scheduler} - can be used to control when the call\n     * to `func` happens after someone subscribes to Observable, as well as when results\n     * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n     * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n     * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n     * and call `subscribe` on the output Observable all function calls that are currently executing\n     * will end before `func` is invoked.\n     *\n     * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n     * In particular, if the callback is called synchronously the subscription of the resulting Observable\n     * will call the `next` function synchronously as well.  If you want to defer that call,\n     * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n     * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n     *\n     * Note that the Observable created by the output function will always emit a single value\n     * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n     * calls will not appear in the stream. If you need to listen for multiple calls,\n     *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n     *\n     * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n     * will be the context that the output function has at call time. In particular, if `func`\n     * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n     * it is recommended that the context of the output function is set to that object as well.\n     *\n     * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n     * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n     * provides convenient error handling and probably is a better choice.\n     * `bindCallback` will treat such functions the same as any other and error parameters\n     * (whether passed or not) will always be interpreted as regular callback argument.\n     *\n     *\n     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n     * // Suppose we have jQuery.getJSON('/my/url', callback)\n     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n     * var result = getJSONAsObservable('/my/url');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Receive an array of arguments passed to a callback</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 5\n     *   console.log(b); // 'some string'\n     *   console.log(c); // {someProperty: 'someValue'}\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n     * boundSomeFunction().subscribe(values => {\n     *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n     * });\n     *\n     *\n     * @example <caption>Use bindCallback with a selector function</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 'a'\n     *   console.log(b); // 'b'\n     *   console.log(c); // 'c'\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n     * boundSomeFunction().subscribe(value => {\n     *   console.log(value) // 'abc'\n     * });\n     *\n     *\n     * @example <caption>Compare behaviour with and without async Scheduler</caption>\n     * function iCallMyCallbackSynchronously(cb) {\n     *   cb();\n     * }\n     *\n     * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n     * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n     *\n     * boundSyncFn().subscribe(() => console.log('I was sync!'));\n     * boundAsyncFn().subscribe(() => console.log('I was async!'));\n     * console.log('This happened...');\n     *\n     * // Logs:\n     * // I was sync!\n     * // This happened...\n     * // I was async!\n     *\n     *\n     * @example <caption>Use bindCallback on an object method</caption>\n     * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n     * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n     * .subscribe(subscriber);\n     *\n     *\n     * @see {@link bindNodeCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func A function with a callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps them to a value that is emitted on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the callback would deliver.\n     * @static true\n     * @name bindCallback\n     * @owner Observable\n     */\n    BoundCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    BoundCallbackObservable.dispatch = function (state) {\n        var self = this;\n        var source = state.source, subscriber = state.subscriber, context = state.context;\n        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n        var subject = source.subject;\n        if (!subject) {\n            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n            var handler = function handlerFn() {\n                var innerArgs = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    innerArgs[_i - 0] = arguments[_i];\n                }\n                var source = handlerFn.source;\n                var selector = source.selector, subject = source.subject;\n                if (selector) {\n                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                    if (result_2 === errorObject_1.errorObject) {\n                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                    }\n                    else {\n                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                    }\n                }\n                else {\n                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n                }\n            };\n            // use named function to pass values in without closure\n            handler.source = source;\n            var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n            if (result === errorObject_1.errorObject) {\n                subject.error(errorObject_1.errorObject.e);\n            }\n        }\n        self.add(subject.subscribe(subscriber));\n    };\n    return BoundCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundCallbackObservable = BoundCallbackObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundCallbackObservable.js.map"},"lineCount":264}},"hash":"fd985322e30b6d3e5743d7d8ebe85bf2","cacheData":{"env":{}}}