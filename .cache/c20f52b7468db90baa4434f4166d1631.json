{"dependencies":[{"name":"../operators/skipLast","loc":{"line":2,"column":25}}],"generated":{"js":"\"use strict\";\nvar skipLast_1 = require('../operators/skipLast');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return skipLast_1.skipLast(count)(this);\n}\nexports.skipLast = skipLast;\n//# sourceMappingURL=skipLast.js.map","map":{"mappings":[{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/rxjs/operator/skipLast.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}}],"sources":{"node_modules/rxjs/operator/skipLast.js":"\"use strict\";\nvar skipLast_1 = require('../operators/skipLast');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return skipLast_1.skipLast(count)(this);\n}\nexports.skipLast = skipLast;\n//# sourceMappingURL=skipLast.js.map"},"lineCount":39}},"hash":"89b6def4bc3a53b5d3c9c63d479ff49d","cacheData":{"env":{}}}